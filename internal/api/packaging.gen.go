// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// OrderRequest defines model for OrderRequest.
type OrderRequest struct {
	Quantity int `json:"quantity"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	Packs *[]struct {
		Count *int `json:"count,omitempty"`
		Size  *int `json:"size,omitempty"`
	} `json:"packs,omitempty"`
	TotalItems *int `json:"totalItems,omitempty"`
	TotalPacks *int `json:"totalPacks,omitempty"`
}

// DeletePackSizeParams defines parameters for DeletePackSize.
type DeletePackSizeParams struct {
	Size int `form:"size" json:"size"`
}

// AddPackSizeJSONBody defines parameters for AddPackSize.
type AddPackSizeJSONBody struct {
	Size int `json:"size"`
}

// AddPackSizeJSONRequestBody defines body for AddPackSize for application/json ContentType.
type AddPackSizeJSONRequestBody AddPackSizeJSONBody

// CalculatePacksJSONRequestBody defines body for CalculatePacks for application/json ContentType.
type CalculatePacksJSONRequestBody = OrderRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a pack size
	// (DELETE /admin/packs)
	DeletePackSize(w http.ResponseWriter, r *http.Request, params DeletePackSizeParams)
	// Add or update a pack size
	// (POST /admin/packs)
	AddPackSize(w http.ResponseWriter, r *http.Request)
	// Calculate optimal pack combination
	// (POST /pack)
	CalculatePacks(w http.ResponseWriter, r *http.Request)
	// Get available pack sizes
	// (GET /packs)
	ListPackSizes(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Delete a pack size
// (DELETE /admin/packs)
func (_ Unimplemented) DeletePackSize(w http.ResponseWriter, r *http.Request, params DeletePackSizeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or update a pack size
// (POST /admin/packs)
func (_ Unimplemented) AddPackSize(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate optimal pack combination
// (POST /pack)
func (_ Unimplemented) CalculatePacks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get available pack sizes
// (GET /packs)
func (_ Unimplemented) ListPackSizes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeletePackSize operation middleware
func (siw *ServerInterfaceWrapper) DeletePackSize(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePackSizeParams

	// ------------- Required query parameter "size" -------------

	if paramValue := r.URL.Query().Get("size"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "size"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePackSize(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPackSize operation middleware
func (siw *ServerInterfaceWrapper) AddPackSize(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPackSize(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CalculatePacks operation middleware
func (siw *ServerInterfaceWrapper) CalculatePacks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CalculatePacks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPackSizes operation middleware
func (siw *ServerInterfaceWrapper) ListPackSizes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPackSizes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/admin/packs", wrapper.DeletePackSize)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/packs", wrapper.AddPackSize)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pack", wrapper.CalculatePacks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs", wrapper.ListPackSizes)
	})

	return r
}
